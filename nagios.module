<?php 

// Copyright 2009 Khalid Baheyeldin http://2bits.com

// Defines to be used by this modules and others that use its hook_nagios()
define('NAGIOS_STATUS_OK',       0);
define('NAGIOS_STATUS_UNKNOWN',  1);
define('NAGIOS_STATUS_WARNING',  2);
define('NAGIOS_STATUS_CRITICAL', 3);

define('NAGIOS_WATCHDOG_WARNING_THRESHOLD',10);
define('NAGIOS_WATCHDOG_CRITICAL_THRESHOLD',2);
define('NAGIOS_WATCHDOG_HOURS',24);
define('NAGIOS_WEBSERVER_USERNAME','apache');


/**
 * Mapping of defines to text strings that Nagios understands
 */
function nagios_status() {
  return array(
    NAGIOS_STATUS_OK       => 'OK',
    NAGIOS_STATUS_UNKNOWN  => 'UNKNOWN',
    NAGIOS_STATUS_WARNING  => 'WARNING',
    NAGIOS_STATUS_CRITICAL => 'CRITICAL',
  );
}

/**
 * Functions to be performed by the base nagios module.
 */
function nagios_functions() {
  return array(
    'requirements_detail' => t('Checking of hook_requirements. This includes the following: module updates, database schema, files directory writability, update.php protected, Lots of other good stuff ...'),
    
    'requirements' => t('Checking of hook_requirements. This includes the following: module updates, database schema, files directory writability, update.php protected, Lots of other good stuff ...'),

    'cron' => t('Check whether cron has been running regularly'),

    'session_anon' => t('Check the number of anonymous sessions for nagios performance data'),
    'session_auth' => t('Check the number of authenticated sessions for nagios performance data'),

    'nodes' => t('Check the number of nodes for nagios performance data'),
    'users' => t('Check the number of users for nagios performance data'),

    'modules' => t('Check the number of modules for nagios performance data'),
    'modules_detail' => t('Check the number of modules for nagios performance data'),
    'themes'  => t('Check the number of themes for nagios performance data'),
    'watchdog' => t('check that watchdog errors are within defined limits'),
    'filesystem_access' => t('check that the filesystem path and all subdirectories are writable by the webserver user'),
  );
}

/**
 * Implementation of hook_menu
 */
function nagios_menu() {
  $items = array();
  $items['admin/settings/nagios'] = array(
    'type'               => MENU_NORMAL_ITEM,
    'title'              => t('Nagios monitoring'),
    'description'        => t('Settings for Nagios monitoring'),
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('nagios_settings'),
    'access arguments'   => array('administer site configuration'),
  );

  $items['nagios'] = array(
    'type'               => MENU_SUGGESTED_ITEM,
    'title'              => t('Nagios status page'),
    'page callback'      => 'nagios_status_page',
    'access callback'    => TRUE,
  );
  return $items;
}

/**
 * Callback for the settings page
 */
function nagios_settings() {
  $group = 'modules';

  $form['nagios_ua'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Unique ID'),
    '#default_value' => variable_get('nagios_ua', 'Nagios'),
    '#description'   => t('Restrict sending information to requests identified by this Unique ID. You should change this to some unique string for your organization, and configure Nagios accordingly. This makes Nagios data less accessible to curious users. See the README.txt for more details.')
  );

  $form['nagios_show_outdated_names'] = array(
    '#type'        => 'checkbox',
    '#title'       => t('Show outdated module/theme name?'),
    '#default_value' => variable_get('nagios_show_outdated_names', TRUE),
  );
  
  $form[$group] = array(
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#title'       => t('Modules'),
    '#description' => t('Select the modules that should report their data into Nagios.'),
  );

  foreach(nagios_invoke_all('nagios_info') as $module => $data) {
    $form[$group]['nagios_enable_' . $module] = array(
      '#type'          => 'checkbox',
      '#title'         => $data['name'] . ' (' . $module . ')',
      '#default_value' => variable_get('nagios_enable_' . $module, TRUE),
    );
  }

  foreach(nagios_invoke_all('nagios_settings') as $module => $module_settings) {
    $form[$module] = array(
      '#type'        => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed'   => TRUE,
      '#title'       => $module,
    );

    foreach($module_settings as $element => $data) {
      $form[$module][$element] = $data;
    }
  }

  return system_settings_form($form);
}

/**
 * Callback for the nagios status page
 */
function nagios_status_page() {
  $args = func_get_args();
  // Module to run checks for.
  $module = array_shift($args);
  // ID to run checks for.
  $id = array_shift($args);
  
  header("Pragma: no-cache");
  header("Expires: 0");

  $codes = nagios_status();

  // Check the unique ID string first
  $ua = variable_get('nagios_ua', 'Nagios');
  if ($_SERVER['HTTP_USER_AGENT'] != $ua) {
    // This is not an authorized unique id, so just return this default status.
    $nagios_data = array(
      'nagios' =>  array(
        'DRUPAL' => array(
          'status' => NAGIOS_STATUS_UNKNOWN,
          'type'   => 'state',
          'text'   => t('Unauthorized'),
        ),
      ),
    );
  }
  else {
    // Authorized so calling other modules
    if ($module) {
      // A specific module has been requested.
      $nagios_data = array();
      $nagios_data[$module] = module_invoke($module, 'nagios', $id);
    }
    else {
      $nagios_data = nagios_invoke_all('nagios');
    }
  }

  // Find the highest level to be the overall status
  $severity = NAGIOS_STATUS_OK;
  $min_severity = variable_get('nagios_min_report_severity', NAGIOS_STATUS_WARNING);
  
  foreach($nagios_data as $module_name => $module_data) {
    foreach($module_data as $key => $value) {
      if ($value['status'] >= $min_severity) {
        $severity = max($severity, $value['status']);
      } 
    }
  }

  // Identifier that we check on the other side
  $output = "\n" . 'nagios=' . $codes[$severity] . ', ';

  $output_state = array();
  $output_perf  = array();

  foreach($nagios_data as $module_name => $module_data) {
    foreach($module_data as $key => $value) {
      switch($value['type']) {
        case 'state':
          // If status is larger then minimum severity
          if ($value['status'] >= $min_severity) {
            $tmp_state = $key . ':' . $codes[$value['status']];
          }
          else {
            $tmp_state = $key . ':' . $codes[NAGIOS_STATUS_OK];
          }  
         
          if (!empty($value['text'])) {
            $tmp_state .= '=' . $value['text'];
          }
          
          if (
            variable_get('nagios_show_outdated_names', TRUE) &&
            $key == 'ADMIN' &&
            $value['text'] == 'Module and theme update status'
            ) {
          	$tmp_projects = update_calculate_project_data(update_get_projects());
          	$outdated_count = 0;
          	foreach ($tmp_projects as $projkey => $projval) {
  	          if ($projval['status'] < UPDATE_CURRENT && $projval['status'] >= UPDATE_NOT_SECURE) {
  	          	switch ($projval['status']) {
  	          	  case UPDATE_NOT_SECURE:
  	          	    $tmp_projstatus = t('NOT SECURE');
  	          	    break;
  	          	  case UPDATE_REVOKED:
  	          	    $tmp_projstatus = t('REVOKED');
  	          	    break;
  	          	  case UPDATE_NOT_SUPPORTED:
  	          	    $tmp_projstatus = t('NOT SUPPORTED');
  	          	    break;
  	          	  case UPDATE_NOT_CURRENT:
  	          	    $tmp_projstatus = t('NOT CURRENT');
  	          	    break;
  	          	  default:
  	          	    $tmp_projstatus = $projval['status'];
  	            }

          	    $tmp_modules .= ' ' . $projkey . ':' . $tmp_projstatus;
          	    $outdated_count++;
          	  }
          	}
          	if ($outdated_count > 0) {
          	  $tmp_modules = trim($tmp_modules);
              $tmp_state .= " ($tmp_modules)";
            }
          }

          $output_state[] = $tmp_state;
          break;

        case 'perf':
          $output_perf[]  = $key . '=' . $value['text'];
          break;
      }
    }
  }

  $output .= implode(', ', $output_state) . ' | ' . implode(';', $output_perf) . "\n";

  // Print the output, so we test the theme
  print theme('page', $output);

  // Exit early so we do not cache the data, nor do we wrap the result in a theme
  exit();
}

/**
 * Custom invoke function
 */
function nagios_invoke_all($hook = 'nagios') {
  // This is a custom invoke function that returns a keyed array
  $return = array();
  $args = func_get_args();
  foreach (module_implements($hook) as $module) {
    $function = $module .'_'. $hook;
    $result = call_user_func_array($function, $args);
    $return[$module] = $result;
  }

  return $return;
}

/**
 * Implementation of hook_nagios_info()
 */
function nagios_nagios_info() {
  return array(
    'name'   => 'Nagios monitoring',
    'id'     => 'NAGIOS',
  );
}

/**
 * Implementation of hook_nagios_settings()
 */
function nagios_nagios_settings() {
  foreach(nagios_functions() as $function => $description) {
    $var = 'nagios_func_' . $function;
    $form[$var] = array(
      '#type'          => 'checkbox',
      '#title'         => $function,
      '#default_value' => variable_get($var, TRUE),
      '#description' => $description,
    );
  }

  $group = 'thresholds';
  $form[$group] = array(
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#title'       => t('Thresholds'),
    '#description' => t('Thresholds for reporting critical alerts to Nagios.'),
  );

  $form[$group]['nagios_cron_duration'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Cron duration'),
    '#default_value' => variable_get('nagios_cron_duration', 60),
    '#description'   => t('Issue a critical alert when cron has not been running for this duration (in minutes). Default is 60 minutes.')
  );

  $form[$group]['nagios_min_report_severity'] = array(
    '#type'          => 'select',
    '#title'         => t('Mininum report severity'),
    '#default_value' => variable_get('nagios_min_report_severity', NAGIOS_STATUS_WARNING),
    '#options'       => nagios_status(),
    '#description'   => t('Issue an alert only for this minimum severity, not for lower severities.'),
  );
  
  $form['watchdog_settings'] = array(  
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#title'       => t('Nagios Watchdog Settings'),
    '#description' => t('Thresholds for the nagios watchdog check.'),
  );
  $form['watchdog_settings']['nagios_watchdog_warning_threshold'] = array(  
    '#type'          => 'textfield',
    '#title'         => t('Warning Threshold'),
    '#size'          => 15,
    '#default_value' => variable_get('nagios_watchdog_warning_threshold', NAGIOS_WATCHDOG_WARNING_THRESHOLD),
    '#description'   => t('maximum number of warnings of watchdog severity warning or less (more severe) before nagios reports warning.')
  );
  $form['watchdog_settings']['nagios_watchdog_critical_threshold'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Critical Threshold'),
    '#size'          => 15,
    '#default_value' => variable_get('nagios_watchdog_critical_threshold', NAGIOS_WATCHDOG_CRITICAL_THRESHOLD),
    '#description'   => t('maximum number of errors of watchdog severity critical or less (more severe) before nagios reports warning.')
  );
  $form['watchdog_settings']['nagios_watchdog_hours'] = array(  
    '#type'          => 'textfield',
    '#title'         => t('Hours'),
    '#size'          => 15,
    '#default_value' => variable_get('nagios_watchdog_hours', NAGIOS_WATCHDOG_HOURS),
    '#description'   => t('How many hours to go back in the logs.')
  );
  
  $form['filesystem_access_settings'] = array(
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#title'       => t('Nagios Filesystem Access Check Settings'),
    '#description' => t('Thresholds for the nagios watchdog check.'),
  );
  $form['filesystem_access_settings']['nagios_webserver_username'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Server User Name'),
    '#size'          => 15,
    '#default_value' => variable_get('nagios_webserver_username', NAGIOS_WEBSERVER_USERNAME ),
    '#description'   => t('The webserver user name.')
  );
  
  return $form;
}

/**
 * Implementation of hook_nagios
 */
function nagios_nagios() {
  $status = array();
  foreach(nagios_functions() as $function => $description) {
    if (variable_get('nagios_func_' . $function, TRUE)) {
      $func = 'nagios_check_' . $function;
      $result = $func();
      $status[$result['key']] = $result['data'];
    }
  }

  return $status;
}

function nagios_check_requirements_detail( $args ){
  $verbose = false;
  if ( isset( $args[0] ) && in_array( 'verbose', $args ) ){
    $verbose = true;
  }
  // Load .install files
  include_once './includes/install.inc';
  drupal_load_updates();

  // Get the run-time requirements and status information.
  $reqs = module_invoke_all('requirements', 'runtime');

  $desc = '';
  $fail_counter = array();
  
  $max_severity = REQUIREMENT_OK;
  
  foreach ($reqs as $key => $requirement) {
    if (isset($requirement['severity'])) {
      $requirement_severity = $requirement['severity'];
      // Ignore update_core warning if update cache has expired and nagios_cron_duration has not passed by yet
      if ($key == 'update_core' && $requirement_severity == REQUIREMENT_WARNING && $requirement['reason'] == UPDATE_UNKNOWN) {
        $grace = 60 * variable_get('nagios_cron_duration', 60);
        $expire = db_result(db_query("SELECT expire FROM {cache_update} WHERE cid = '%s'", 'update_available_releases'));
        if ($expire && time() < ($expire + $grace)) {
          continue;
        }
      }
      if ($requirement_severity > REQUIREMENT_OK ) {
        switch( $requirement_severity ){
          case REQUIREMENT_WARNING:
            $severity_alias = 'warnings';
            break;
          case REQUIREMENT_ERROR:
            $severity_alias = 'errors';
            break;
          default:
            $severity_alias = 'unknown';
            break;
        }
        $fail_counter[$severity_alias] = isset( $fail_counter[$severity_alias] ) ? ++$fail_counter[$severity_alias] : 1;
        if ( $verbose ){
          $desc .= $desc ? ", " . $requirement['title'] : $requirement['title'];
          $desc .= ' (' . $requirement['description'] . ')';
        }
      }
      if ( $requirement_severity > $max_severity ){
        $max_severity = $requirement['severity'];
      }
    }
  }

  // Create a status to pass back, and a text description too
  switch($max_severity) {
    case REQUIREMENT_OK:
    case REQUIREMENT_INFO:
      $data = array(
        'status' => NAGIOS_STATUS_OK, 
        'type'   => 'state',
        'text'   => '',
      );
      break;
    case REQUIREMENT_WARNING:
      $data = array(
        'status' => NAGIOS_STATUS_WARNING, 
        'type'   => 'state',
        'text'   => t('@desc ', array('@desc' => $desc)),
      );
      break;
    case REQUIREMENT_ERROR:
      $data = array(
        'status' => NAGIOS_STATUS_CRITICAL, 
        'type'   => 'state',
        'text'   => t('@desc ', array('@desc' => $desc)),
      );
      break;
    default:
      $data = array(
        'status' => NAGIOS_STATUS_UNKNOWN, 
        'type'   => 'state',
        'text'   => t('severity is @severity ',array('@severity' => $max_severity)),
      );
      break;
  }
  $data['text'] .= nagios_format_fail_count( $fail_counter );
  
  return array(
    'key' => 'ADMIN_DETAIL',
    'data' => $data,
  );
}

function nagios_format_fail_count( $fail_counter ){
  $str_fail_count = '';
  $first = true;
  foreach ( $fail_counter as $severity_alias => $fail_count ){
    if ( $first ){
      $first = false;
    }
    else {
      $str_fail_count .= ', ';
    }
    $str_fail_count .= $severity_alias . ':' . $fail_count;
  }
  return $str_fail_count;
}

function nagios_check_requirements() {
  // Load .install files
  include_once './includes/install.inc';
  drupal_load_updates();

  // Get the run-time requirements and status information.
  $reqs = module_invoke_all('requirements', 'runtime');
  // Check the requirements as to the most severe status
  $severity = REQUIREMENT_OK;
  foreach ($reqs as $key => $requirement) {
    if (isset($requirement['severity'])) {
      // Ignore update_core warning if update cache has expired and nagios_cron_duration has not passed by yet
      if ($key == 'update_core' && $requirement['severity'] == REQUIREMENT_WARNING && $requirement['reason'] == UPDATE_UNKNOWN) {
        $grace = 60 * variable_get('nagios_cron_duration', 60);
        $expire = db_result(db_query("SELECT expire FROM {cache_update} WHERE cid = '%s'", 'update_available_releases'));
        if ($expire && time() < ($expire + $grace)) {
          continue;
        }
      }
      if ($requirement['severity'] > $severity) {
        $severity = $requirement['severity'];
        $desc = $requirement['title'];
      }
    }
  }

  // Create a status to pass back, and a text description too
  switch($severity) {
    case REQUIREMENT_OK:
    case REQUIREMENT_INFO:
      $data = array(
        'status' => NAGIOS_STATUS_OK, 
        'type'   => 'state',
        'text'   => '',
      );
      break;
    case REQUIREMENT_WARNING:
      $data = array(
        'status' => NAGIOS_STATUS_WARNING, 
        'type'   => 'state',
        'text'   => t('@desc', array('@desc' => $desc)),
      );
      break;
    case REQUIREMENT_ERROR:
      $data = array(
        'status' => NAGIOS_STATUS_CRITICAL, 
        'type'   => 'state',
        'text'   => t('@desc', array('@desc' => $desc)),
      );
      break;
    default:
      $data = array(
        'status' => NAGIOS_STATUS_UNKNOWN, 
        'type'   => 'state',
        'text'   => t('severity is @severity',array('@severity' => $severity)),
      );
      break;
  }

  return array(
    'key' => 'ADMIN',
    'data' => $data,
  );
}

function nagios_check_cron() {
  $cron_last = variable_get('cron_last', 0);
  $mins = variable_get('nagios_cron_duration', 60);

  if (time() > ($cron_last + $mins*60)) {
    $data = array(
      'status' => NAGIOS_STATUS_CRITICAL,
      'type'   => 'state',
      'text'   => t('cron not running @mins mins', array('@mins' => $mins)),
    );
  }
  else {
    $data = array(
      'status' => NAGIOS_STATUS_OK, 
      'type'   => 'state',
      'text'   => '',
    );
  }

  return array(
    'key' => 'CRON',
    'data' => $data,
  );
}

function nagios_check_session_anon() {
  $interval = time() - 900; // Last 15 minutes
  $count = (int)sess_count($interval, TRUE);

  $data = array(
    'status' => NAGIOS_STATUS_OK,
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'SAN',
    'data' => $data,
  );
}

function nagios_check_session_auth() {
  $interval = time() - 900; // Last 15 minutes
  $count = (int)sess_count($interval, FALSE);

  $data = array(
    'status' => NAGIOS_STATUS_OK,
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'SAU',
    'data' => $data,
  );
}

function nagios_check_nodes() {
  // Include number of active nodes in the report
  $count = (int)db_result(db_query("SELECT COUNT(*) FROM {node} WHERE status = 1"));
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key'  => 'NOD',
    'data' => $data,
  );
}

function nagios_check_users() {
  // Include number of active users in the report
  $count = (int)db_result(db_query("SELECT COUNT(*) FROM {users} WHERE status = 1"));
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'USR',
    'data' => $data,
  );
}

function nagios_check_modules() {
  $count = (int)db_result(db_query("SELECT COUNT(*) FROM {system} WHERE status = 1 AND type = 'module'"));
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'MOD',
    'data' => $data,
  );
}

function nagios_check_modules_detail( $args ) {
  $verbose = false;
  if ( isset( $args[0] ) && in_array( 'verbose', $args ) ){
    $verbose = true;
  }
  
  if ( ! $available = update_get_available( false ) ) {
    
    $data = array(
      'status' => NAGIOS_STATUS_WARNING, 
      'type'   => 'state',
      'text'   => 'Unable to fetch update information, make sure cron has run recently',
    );
    
    return array(
      'key' => 'MOD_DETAIL',
      'data' => $data,
    );
    
  }
  
  module_load_include('inc', 'update', 'update.compare');
  $update_data = update_calculate_project_data($available);

  $nagios_status = NAGIOS_STATUS_OK;
  $text = '';
  
  $fail_counts = array();
  
  foreach ( $update_data as $project_name => $project_update_info ){
    
    $project_status = $project_update_info['status'];
    
    if ( $project_status > 4 ){
      continue;
    }
    
    // if there are security updates available set nagios status to critical
    $nagios_status = $project_status == UPDATE_NOT_SECURE ? NAGIOS_STATUS_CRITICAL : $nagios_status;
    //  if update status is less than UPDATE_CURRENT
    //   AND the update status is not already critical
    //   set the update status to warning
    $nagios_status = $project_status < UPDATE_CURRENT && $nagios_status != NAGIOS_STATUS_CRITICAL ? NAGIOS_STATUS_WARNING : $nagios_status;
    
    switch( $project_status ){
      case UPDATE_NOT_SECURE:
        $update_status_alias = 'not secure';
        break;
      case UPDATE_REVOKED:
        $update_status_alias = 'revoked';
        break;
      case UPDATE_NOT_SUPPORTED:
        $update_status_alias = 'not supported';
        break;
      case UPDATE_NOT_CURRENT:
        $update_status_alias = 'not current';
        break;
      case UPDATE_UNKNOWN:
      case UPDATE_NOT_CHECKED:
      case UPDATE_NOT_FETCHED:
        $update_status_alias = 'unknown';
        break;
    }
    
    $fail_counts[$update_status_alias] = isset( $fail_counts[$update_status_alias] ) ? ++$fail_counts[$update_status_alias] : 1;
    
    if ( $verbose ){
      if ( $text && $project_status < UPDATE_CURRENT ){
        $text .= ', ';
      }
      switch( $project_status ){
        case UPDATE_NOT_SECURE:
          $text .= t('@project_name is not secure!', array( '@project_name' => $project_name ) );
          break;
        case UPDATE_REVOKED:
          $text .= t('@project_name project has been revoked!', array( '@project_name' => $project_name ) );
          break;
        case UPDATE_NOT_SUPPORTED:
          $text .= t('@project_name is using an unsupported release', array( '@project_name' => $project_name ) );
          break;
        case UPDATE_NOT_CURRENT:
          $text .= t('@project_name is out of date', array( '@project_name' => $project_name ) );
          break;
        case UPDATE_UNKNOWN:
        case UPDATE_NOT_CHECKED:
        case UPDATE_NOT_FETCHED:
          $reason = isset($project_update_info['reason']) ? $project_update_info['reason'] : t('Can not determine status');
          $text .= t('@project_name not checked: @reason', array( '@project_name' => $project_name, '@reason', $reason ) );
          break;
        default:
          break;
      }
    }
      
  }
  
  $data = array(
    'status' => $nagios_status, 
    'type'   => 'state',
    'text'   => $text,
  );
  
  if ( ! $verbose ){
    $data['text'] .= nagios_format_fail_count( $fail_counts );
  }
  
  return array(
    'key' => 'MOD_DETAIL',
    'data' => $data,
  );
}

/**
 * Implementation of hook_nagios_checks().
 */
function nagios_nagios_checks() {
  return nagios_functions();
}

/**
 * Implementation of drush hook_nagios_check().
 */
function nagios_nagios_check($function, $args) {
  // We don't bother to check if the function has been enabled by the user.
  // Since this runs via drush, web security is not an issue.
  $func = 'nagios_check_' . $function;
  $result = $func($args);
  $status[$result['key']] = $result['data'];
  return $status;
}

function nagios_check_themes() {
  $count = (int)db_result(db_query("SELECT COUNT(*) FROM {system} WHERE status = 1 AND type = 'theme'"));
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'THM',
    'data' => $data,
  );
}

function nagios_check_watchdog( $args ){
  // defaults
  $warning_threshold = variable_get('nagios_watchdog_warning_threshold', NAGIOS_WATCHDOG_WARNING_THRESHOLD);
  $critical_threshold = variable_get('nagios_watchdog_critical_threshold', NAGIOS_WATCHDOG_CRITICAL_THRESHOLD);
  $hours = variable_get('nagios_watchdog_hours', NAGIOS_WATCHDOG_HOURS);
  
  // args from the drush command line
  switch ( count( $args ) ){
    case 3:
      $hours = $args[2];
    case 2:
      $critical_threshold = $args[1];
    case 1:
      $warning_threshold = $args[0];
      break;
  }
  
  $threshold_period = $hours * 60 * 60;
  
  $sql = "SELECT SUM( CASE WHEN severity <= %d THEN 1 ELSE 0 END ) as warning_count, SUM( CASE WHEN severity <= %d THEN 1 ELSE 0 END ) as critical_count FROM {watchdog} WHERE timestamp > UNIX_TIMESTAMP() - %d;";
  
  $sql_args = array( WATCHDOG_WARNING, WATCHDOG_CRITICAL, $threshold_period );
  $result = db_query( $sql, $sql_args );
  
  $watchdog_counts = db_fetch_object( $result );
  
  $str_total_errors = t( 'Critical: @total_critical. Warnings: @total_warning. In @hours hrs', array( '@total_critical' => $watchdog_counts->critical_count, '@total_warning' => $watchdog_counts->warning_count, '@hours' => $hours ) );
  
  if ( $watchdog_counts->critical_count >= $critical_threshold ){
    $nagios_status = NAGIOS_STATUS_CRITICAL;
    $nagios_status_text = t( '@critical or more critical errors. ', array( '@critical' => $critical_threshold,  ) );
  }
  else if ( $watchdog_counts->warning_count >= $warning_threshold ){
    $nagios_status = NAGIOS_STATUS_WARNING;
    $nagios_status_text = t( '@warning or more warnings. ', array( '@warning' => $warning_threshold,  ) );
  }
  else {
    $nagios_status = NAGIOS_STATUS_OK;
    $nagios_status_text = '';
  }
  
  $nagios_status_text .= $str_total_errors;
  $data = array(
    'status' => $nagios_status, 
    'type'   => 'state',
    'text'   => $nagios_status_text,
  );
  
  return array(
    'key' => 'WATCHDOG',
    'data' => $data,
  );
}

function nagios_check_filesystem_access(){
  $path = file_directory_path();
  $dirs = nagios_get_subdirectories( $path );
  
  array_unshift( $dirs, $path );
  
  $nagios_status = NAGIOS_STATUS_OK;
  $nagios_status_text = '';
  
  foreach( $dirs as $directory ){
    $perms = fileperms( $directory );
    $readablePerms = substr(sprintf('%o', $perms), -4);
    
    $writable_world = $perms & 0x0002 ? 1 : 0;
    $writable_group = $perms & 0x0010 ? 1 : 0;
    
    $intFilegroup = filegroup ( $directory );
    
    $arrayFilegroupInfo = posix_getgrgid( $intFilegroup );
    
    $webserver_username = variable_get('nagios_webserver_username', NAGIOS_WEBSERVER_USERNAME );
    
    $writable_apache = in_array( $webserver_username, $arrayFilegroupInfo['members'] ) && $writable_group ? 1 : 0;
    
    if ( ! $writable_apache && ! $writable_world ){
      $nagios_status = NAGIOS_STATUS_CRITICAL;
      $nagios_status_text = t( '@directory not writable by @webserver_username user', array( '@directory' => $directory, '@webserver_username' => $webserver_username ) );
      break;
    }
    elseif( $nagios_status == NAGIOS_STATUS_WARNING ){
      continue;
    }
    elseif ( ! $writable_apache && $writable_world ) {
      $nagios_status = NAGIOS_STATUS_WARNING;
      $nagios_status_text = t( '@directory not writable by @webserver_username user, permissions set to 0777', array( '@directory' => $directory, '@webserver_username' => $webserver_username ) );
    }
    elseif ( $writable_world ){
      $nagios_status = NAGIOS_STATUS_WARNING;
      $nagios_status_text = t( '@directory permissions set to 0777', array( '@directory' => $directory, '@webserver_username' => $webserver_username ) );
    }
    
  }
  
  $data = array(
    'status' => $nagios_status, 
    'type'   => 'state',
    'text'   => $nagios_status_text,
  );
  
  return array(
    'key' => 'WATCHDOG',
    'data' => $data,
  );
}

function nagios_get_subdirectories( $path ){
  $dirs = array();
  if (is_dir($path) && $handle = opendir($path)) {
    while (FALSE !== ($file = readdir($handle))) {
      if ( $file[0] == '.' ){
        continue;
      }
      
      if ( ! is_dir($path . '/' . $file) ){
        continue;
      }
      
      $dirs[] = $path . '/' . $file;
      
      $dirs = array_merge( nagios_get_subdirectories( $path . '/' . $file ), $dirs );
    }
  }
  
  return $dirs;
  
}